worker_processes auto;
events { worker_connections 1024; }

http {
    upstream frontend_nodes {
        server frontend1:80;
        server frontend2:80;
        server frontend3:80;
    }

    # To inject a unique node_id per container in the header,
    # nginx doesn't support per-upstream-server headers out of the box.
    # Instead, define separate upstream servers and a map to inject header.

    # But since we want load balancing, we can use "upstream" with "zone"
    # and "proxy_set_header" inside "location" block.
    # For per backend node_id, use the $upstream_addr or $proxy_host variables
    # and map them to a node id.

    map $upstream_addr $node_id {
        default "unknown";
        "frontend1:80" "node_1";
        "frontend2:80" "node_2";
        "frontend3:80" "node_3";
    }

    server {
        listen 80;

        location /api/ {
            # Proxy API calls to json-server on port 3000 of same upstream node.
            # Trick: Use proxy_pass with variables requires extra config.
            # For simplicity, we will proxy /api to json-server on one of the frontend containers (frontend1).

            proxy_pass http://frontend1:3000/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        location / {
            # Load balance frontend on port 80
            proxy_pass http://frontend_nodes;

            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

            # Add node_id header based on backend server address
            proxy_set_header X-Node-ID $node_id;

            # Optional: proxy websocket, etc.
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }
    }
}
